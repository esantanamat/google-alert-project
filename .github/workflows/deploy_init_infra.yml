name: Deploy Init Infrastructure, and Frontend

on:
  push:
    paths:
      - 'frontend/**'
  workflow_dispatch:
env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1

jobs:
  deploy-frontend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Sync frontend to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_FRONTEND_BUCKET: ${{ secrets.AWS_FRONTEND_BUCKET }}
        run: |
          aws s3 sync ./frontend s3://$AWS_FRONTEND_BUCKET/ --delete

      
  terraform:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: "Terraform change management"
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/init

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Sync frontend to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_FRONTEND_BUCKET: ${{ secrets.AWS_FRONTEND_BUCKET }}
        run: |
          aws s3 sync ../../frontend s3://$AWS_FRONTEND_BUCKET/ --delete

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
      - name: Terraform Init
        id: init
        run: terraform init
    
      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push docker image to ecr
        env: 
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: google-lambda
            FIRST_IMAGE_TAG: http-handler-latest
            SECOND_IMAGE_TAG: reminder-checker-latest
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$FIRST_IMAGE_TAG ../../lambda-http-handler
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$FIRST_IMAGE_TAG
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SECOND_IMAGE_TAG ../../lambda-reminder-checker
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SECOND_IMAGE_TAG
