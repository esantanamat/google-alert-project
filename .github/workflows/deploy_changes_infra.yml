name: Terraform Change Management Pipeline w Github Actions

on:
  push:
    branches:
      - main
    paths:
      - infrastructure/main/**
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  TF_LOG: WARN
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  TF_VAR_api_key_secret: ${{ secrets.API_KEY_SECRET }}
  EMAIL_CREDS_JSON: ${{ secrets.EMAIL_CREDS_JSON }}
  AWS_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: "Terraform change management"
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest


      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        

      - name: Update Lambda function with new image
        env:
          LAMBDA_FUNCTION_NAME: reminder-api-lambda-function
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: google-lambda
          IMAGE_TAG: reminder-checker-latest
        run: |
          aws lambda update-function-code \
            --region $AWS_REGION \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Update second lambda function with new image
        env:
          LAMBDA_FUNCTION_NAME: http-lambda-function
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: google-lambda
          IMAGE_TAG: http-handler-latest
        run: |
          aws lambda update-function-code \
              --region $AWS_REGION \
              --function-name $LAMBDA_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Update third lambda function with new image
        env:
          LAMBDA_FUNCTION_NAME: google-api-lambda-function
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: google-lambda
          IMAGE_TAG: google-api-func-latest
        run: |
          aws lambda update-function-code \
              --region $AWS_REGION \
              --function-name $LAMBDA_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Update fourth lambda function with new image
        env:
          LAMBDA_FUNCTION_NAME: email-notification-lambda
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: google-lambda
          IMAGE_TAG: email-notification-func-latest
        run: |
          aws lambda update-function-code \
              --region $AWS_REGION \
              --function-name $LAMBDA_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              


      
      - name: Terraform Init
        run: terraform init
    
     
      - name: Terraform Format
        run: terraform fmt 


      - name: Terraform Plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

        
      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      
      - name: Get API Gateway URL from Terraform output
        run: |
          echo "API_GATEWAY_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
        working-directory: ./infrastructure/main


      - name: Generate and upload config.json to dynamically reference api gateway url
        env:
          AWS_FRONTEND_BUCKET: ${{ secrets.AWS_FRONTEND_BUCKET }}
        run: |
          API_URL=$(terraform output -raw api_url)
          echo "{\"api_url\": \"$API_URL\"}" > config.json
          aws s3 cp config.json s3://$AWS_FRONTEND_BUCKET/config.json 